name: CI

on:
  pull_request:
    branches:
      - dev

env:
  RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
  RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
  RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
  RABBITMQ_VIRTUAL_HOST: ${{ secrets.RABBITMQ_VIRTUAL_HOST }}
  EUREKA_URL: ${{ secrets.DEV_EUREKA_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  TTB_KEY: ${{ secrets.TTB_KEY }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  TOSS_PAYMENT_CLIENT_KEY: ${{ secrets.TOSS_PAYMENT_CLIENT_KEY }}
  TOSS_PAYMENT_SECRET_KEY: ${{ secrets.TOSS_PAYMENT_SECRET_KEY }}
  MINIO_HOST: ${{ secrets.MINIO_HOST }}
  MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
  MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
  ELASTIC_KEY: ${{ secrets.ELASTIC_KEY }}


jobs:
  build:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build all modules with Maven
        run: mvn clean install -DskipTests=true -DEUREKA_URL=${{ secrets.DEV_EUREKA_URL }} -DTTB_KEY=${{ secrets.TTB_KEY }} -B


  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify -Dspring.profiles.active=test \
          -DEUREKA_URL=${{ secrets.DEV_EUREKA_URL }} \
          -DTTB_KEY=${{ secrets.TTB_KEY }} \
          -DTOSS_PAYMENT_CLIENT_KEY=${{ secrets.TOSS_PAYMENT_CLIENT_KEY }} \
          -DTOSS_PAYMENT_SECRET_KEY=${{ secrets.TOSS_PAYMENT_SECRET_KEY }} \
          -DMINIO_HOST=${{ secrets.MINIO_HOST }} \
          -DMINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }} \
          -DMINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }} \
          sonar:sonar \
            -Dsonar.projectKey=ink3_api_server \
            -Dsonar.projectName='ink3_api_server' \
            -Dsonar.host.url=http://s4.java21.net:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=api/target/site/jacoco/jacoco.xml


      - name: Check coverage threshold
        run: |
          LINE_COVERAGE=$(grep -A1 "<counter type=\"LINE\"" api/target/site/jacoco/jacoco.xml | grep -oP 'covered="\K[0-9]+' | paste -sd+ - | bc)
          LINE_MISSED=$(grep -A1 "<counter type=\"LINE\"" api/target/site/jacoco/jacoco.xml | grep -oP 'missed="\K[0-9]+' | paste -sd+ - | bc)
          TOTAL=$((LINE_COVERAGE + LINE_MISSED))
          PERCENT=$((LINE_COVERAGE * 100 / TOTAL))
          echo "Coverage: $PERCENT%"
    #          if [ "$PERCENT" -lt 60 ]; then
    #            echo "Coverage is below 60%! Failing build."
    #            exit 1
    #          fi


  test:
    needs: build
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Extract version from POM
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 추출된 버전 확인
        run: echo "${{ steps.extract_version.outputs.version }} 입니다."

      - name: Package application (skip tests)
        run: mvn package -DskipTests=true -B

      - name: Run application in background
        env:
          EUREKA_URL: ${{ secrets.DEV_EUREKA_URL }}
        run: |
          nohup java -jar api/target/api-${{ steps.extract_version.outputs.version }}.jar \
            --server.port=10270 \
            --spring.profiles.active=test \
            --TTB_KEY=$TTB_KEY > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for application to start
        run: sleep 30

      - name: Check health endpoint
        run: |
          for i in {1..10}; do
            echo ":hourglass_flowing_sand: Waiting for server to start... attempt $i"
            if curl --fail http://localhost:10270/shop/actuator/health; then
              echo ":white_check_mark: Server is up"
              exit 0
            fi
            sleep 3
          done
          echo ":x: Server failed to start in time"
          exit 1

      - name: Stop application
        run: kill $(cat app.pid)

      - name: Run unit tests

        run: |
          mvn test \
          -Dspring.profiles.active=test \
          -DTTB_KEY=$TTB_KEY \
          -DTOSS_PAYMENT_CLIENT_KEY=$TOSS_PAYMENT_CLIENT_KEY \
          -DTOSS_PAYMENT_SECRET_KEY=$TOSS_PAYMENT_SECRET_KEY \
          -DMINIO_HOST=$MINIO_HOST \
          -DMINIO_ACCESS_KEY=$MINIO_ACCESS_KEY \
          -DMINIO_SECRET_KEY=$MINIO_SECRET_KEY \
          -DELASTIC_KEY="$ELASTIC_KEY" \
          -B

      - name: Print app log if health check fails
        if: failure()
        run: cat app.log
